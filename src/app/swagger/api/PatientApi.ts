/**
 * MiMQIP API
 * Endpoints for the MiMQIP API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {Inject, Injectable, Optional}                      from '@angular/core';
import {Http, Headers, URLSearchParams}                    from '@angular/http';
import {RequestMethod, RequestOptions, RequestOptionsArgs} from '@angular/http';
import {Response, ResponseContentType}                     from '@angular/http';

import {Observable}                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import {BASE_PATH, COLLECTION_FORMATS}                     from '../variables';
import {Configuration}                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class PatientApi {
  protected basePath = 'https://api.mimqip/';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Post new patient
   * Post new patient
   * @param patient Patient to add
   */
  public createPatient(patient: models.PatientDto, extraHttpRequestParams?: any): Observable<models.EvaluationDto> {
    return this.createPatientWithHttpInfo(patient, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Patient by ID
   * Access a single patient by ID
   * @param patientId ID of patient to fetch
   */
  public getPatientById(patientId: number, extraHttpRequestParams?: any): Observable<models.PatientDto> {
    return this.getPatientByIdWithHttpInfo(patientId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Patient Simple
   * Patient Simple
   * @param patientId ID of patient to fetch
   */
  public getPatientSimpleById(patientId: number, extraHttpRequestParams?: any): Observable<models.PatientSimpleDto> {
    return this.getPatientSimpleByIdWithHttpInfo(patientId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Patients
   * Endpoint returns a list of patients
   */
  public getPatients(extraHttpRequestParams?: any): Observable<Array<models.PatientDto>> {
    return this.getPatientsWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Patients Simple
   * Patients Simple
   */
  public getPatientsSimple(extraHttpRequestParams?: any): Observable<Array<models.PatientSimpleDto>> {
    return this.getPatientsSimpleWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Update patient with the diagnosis
   * Update patient with the diagnosis
   * @param patientId ID of patient to fetch
   * @param diagnosis diagnosis
   */
  public updatePatientById(patientId: number, diagnosis: string, extraHttpRequestParams?: any): Observable<{}> {
    return this.updatePatientByIdWithHttpInfo(patientId, diagnosis, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }


  /**
   * Post new patient
   * Post new patient
   * @param patient Patient to add
   */
  public createPatientWithHttpInfo(patient: models.PatientDto, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'patient' is not null or undefined
    if (patient === null || patient === undefined) {
      throw new Error('Required parameter patient was null or undefined when calling createPatient.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: patient == null ? '' : JSON.stringify(patient), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patient by ID
   * Access a single patient by ID
   * @param patientId ID of patient to fetch
   */
  public getPatientByIdWithHttpInfo(patientId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients/${patientId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'patientId' is not null or undefined
    if (patientId === null || patientId === undefined) {
      throw new Error('Required parameter patientId was null or undefined when calling getPatientById.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patient Simple
   * Patient Simple
   * @param patientId ID of patient to fetch
   */
  public getPatientSimpleByIdWithHttpInfo(patientId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients/${patientId}/simple`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'patientId' is not null or undefined
    if (patientId === null || patientId === undefined) {
      throw new Error('Required parameter patientId was null or undefined when calling getPatientSimpleById.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patients
   * Endpoint returns a list of patients
   */
  public getPatientsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Patients Simple
   * Patients Simple
   */
  public getPatientsSimpleWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients/simple`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update patient with the diagnosis
   * Update patient with the diagnosis
   * @param patientId ID of patient to fetch
   * @param diagnosis diagnosis
   */
  public updatePatientByIdWithHttpInfo(patientId: number, diagnosis: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/patients/${patientId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'patientId' is not null or undefined
    if (patientId === null || patientId === undefined) {
      throw new Error('Required parameter patientId was null or undefined when calling updatePatientById.');
    }
    // verify required parameter 'diagnosis' is not null or undefined
    if (diagnosis === null || diagnosis === undefined) {
      throw new Error('Required parameter diagnosis was null or undefined when calling updatePatientById.');
    }
    if (diagnosis !== undefined) {
      queryParameters.set('diagnosis', <any>diagnosis);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Patch,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
